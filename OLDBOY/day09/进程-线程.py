__author__ = 'qgw'

'''
程序的执行实例称为进程。
    每个进程提供执行程序所需的资源。
    进程具有虚拟地址空间、可执行代码、系统对象的打开句柄、安全上下文、唯一进程标识符、环境变量、优先级类、最小和最大工作集大小，以及至少一个执行线程。
    每个进程都是从一个线程开始的，通常称为主线程，但是可以从它的任何线程创建额外的线程。
程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程
程序和进程的区别就在于：
    程序是指令的集合，它是进程运行的静态描述文本；
    进程是程序的一次执行活动，属于动态概念。
'''

#进程和线程没有可比性
#启动一个线程快

'''
线程是操作系统能够进行运算调度的最小单位。
它被包含在进程之中，是进程中的实际运作单位。
一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务
线程不同于进程。
线程是执行的上下文，而进程是与计算相关联的一组资源。
一个进程可以有一个或多个线程。
'''

#进程和线程没有可比性
#启动一个线程快

#线程和进程的区别
"""
线程共享创建它的进程的地址空间；进程有自己的地址空间。
线程可以直接访问其进程的数据段；进程有自己的父进程的数据段副本。
线程可以直接与其进程的其他线程通信；进程必须使用进程间通信来与同级进程通信。
新线程很容易创建；新进程需要父进程的复制。
线程可以对统一进程的线程进行相当大的控制；进程只能对子进程进行控制。
对主线程的更改（取消、优先级更改等）可能会影响进程其他线程的行为；对父进程的更改不会影响子进程。
"""
#同一个进程的线程之间可以直接交流，
#两个进程想通信，必须通过一个中间代理来实现

'''
IO 操作不占用CPU
计算占用CPU

python多线程 不适合CPU密集操作型的任务，适合熊密集型任务
'''